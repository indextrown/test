# -*- coding: utf-8 -*-
"""Untitled53.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ot_94I8Jm9JMo573HuocTfGOxStGXm2s
"""

from volatility import *

with open("bithumb.txt", "r") as f:                              #파일로부터 데이터를 읽어와 f로 지정
  key1 = f.readline().strip()                                    #한 줄을 읽어 온 다음 양 쪽의 공백을 제거함
  key2 = f.readline().strip()                                    #한 줄을 읽어 온 다음 양 쪽의 공백을 제거함

bithumb = pybithumb.Bithumb(key1, key2)                          #읽어온 키 값을 bithumb 클래스 생성자로 넣어준다.
                                                        
target_price = get_target_price()                                #함수 밖에서 사용할 수 있도록 목표가 반환

hold_flag = False                                                #매수했다면 True / 그렇지 않다면 False  

while True:
                                             #매수하는 기능을 차단 시킴
  now = datetime.datetime.now()
  mid = datetime.datetime(now.year, now.month, now.day)  #2시 0분 0초
  delta = datetime.timedelta(seconds=10)

  if mid <= now <=mid + delta:
    if hold_flag == True:
      ret = sell_crypto_currency(bithumb)
      ret = bithumb.get_order_completed(ret)                          #주문에 대한 상세한 내용이 딕셔너리 형태로 반환
      print("매도", ret)
    target_price = get_target_price()
    hold_flag = False

  else:
      price = pybithumb.get_current_price("BTC")                     #BTC 현재 가격을 불러와서 price 변수에 저장한다
      if target_price <= price and hold_flag == False:               #자산을 매수하지 않았을때인 동시에 현재가가 목표가를 넘어섰을때
        ret = buy_crypto_currency(bithumb, price)                          #buy_crypto_currency함수는 입력값으로 bithumb 객체와 현재값 정보를 입력받는다
        print("매수", ret)
        hold_flag = True  

  print(target_price, price)  

  
  time.sleep(1)                                                  #적당히 시간을 두고 조회하도록 1초를 쉬어줌